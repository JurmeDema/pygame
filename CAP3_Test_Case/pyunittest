import unittest
import pygame
from pygame.locals import QUIT, KEYDOWN, KEYUP

class TestGame(unittest.TestCase):

    def setUp(self):
        pygame.init()
        self.screen = pygame.display.set_mode((900, 500))
        pygame.display.set_caption('My game')
        self.clock = pygame.time.Clock()
        self.font = pygame.freetype.Font(None, 30)
        self.player = pygame.rect.Rect(10, 200, 20, 100)
        self.bot = pygame.rect.Rect(870, 200, 20, 100)
        self.ball = pygame.rect.Rect(445, 245, 10, 10)
        self.running = True
        self.game_status = 'game'
        self.player_speed_y = 0
        self.ball_speed_x = -2
        self.ball_speed_y = 2
        self.max_score = 1
        self.score = [0, 0]

    def tearDown(self):
        pygame.quit()

    def test_game_running(self):
        # Test that the game is running properly
        while self.running:
            for event in pygame.event.get():
                if event.type == QUIT:
                    self.running = False
                if event.type == KEYDOWN:
                    if self.game_status == 'menu':
                        self.game_status = 'game'
                    self.score = [0, 0]
                    if event.key == pygame.K_UP:
                        self.player_speed_y -= 1
                    if event.key == pygame.K_DOWN:
                        self.player_speed_y += 1

                if event.type == KEYUP:
                    if event.key == pygame.K_UP:
                        self.player_speed_y += 1
                    if event.key == pygame.K_DOWN:
                        self.player_speed_y -= 1
            if self.game_status == 'game':
                self.player.y += self.player_speed_y
                self.ball.x += self.ball_speed_x
                self.ball.y += self.ball_speed_y
                self.ball_check()
                self.move_bot()
            self.screen.fill((0, 0, 0))
            self.font.render_to(self.screen, (440, 20), str(self.score[0]) + ':' + str(self.score[1]), (255, 255, 255))
            pygame.draw.rect(self.screen, (20, 200, 20), self.player)
            pygame.draw.rect(self.screen, (200, 20, 20), self.bot)
            pygame.draw.ellipse(self.screen, (255, 255, 255), self.ball)
            if self.game_status == 'menu':
                if self.score[0] >= self.max_score:
                    self.font.render_to(self.screen, (200, 20), 'You win!', (255, 255, 255))
                else:
                    self.font.render_to(self.screen, (200, 20), 'Computer win', (255, 255, 255))
            pygame.display.flip()
            self.clock.tick(60)

    def move_bot(self):
        if self.ball.centery > self.bot.centery and self.ball.centerx > 450:
            self.bot.y += 1
        if self.ball.centery < self.bot.centery and self.ball.centerx > 450:
            self.bot.y -= 1

    def ball_respawn(self):
        self.ball.center = (450, 250)
        if self.score[0] >= self.max_score or self.score[1] >= self.max_score:
            self.game_status = 'menu'

    def ball_check(self):
        if self.ball.top <= 0:
            self.ball_speed_y = -self.ball_speed_y
        if self.ball.bottom >= 500:
            self.ball_speed_y = - self.ball_speed_y
        if self.ball.colliderect(self.bot) or self.ball.colliderect(self.player):
            self.ball_speed_x = -self.ball_speed_x
        if self.ball.right < 0:
            self.score[1] += 1
            self.ball_respawn()
        if self.ball.left > 900:
            self.score[0] += 1
            self.ball_respawn()

if __name__ == '__main__':
    unittest.main()
